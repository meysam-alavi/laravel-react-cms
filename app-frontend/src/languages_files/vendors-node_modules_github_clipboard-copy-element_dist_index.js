"use strict";
(() => {
    var z = Object.defineProperty;
    var r = ($, R) => z($, "name", {value: R, configurable: !0});
    (globalThis.webpackChunk = globalThis.webpackChunk || []).push([["vendors-node_modules_github_clipboard-copy-element_dist_index_esm_js-node_modules_github_remo-9d7385", "node_modules_delegated-events_dist_index_js", "vendors-node_modules_delegated-events_dist_index_js-node_modules_github_template-parts_lib_index_js", "vendors-node_modules_github_clipboard-copy-element_dist_index_esm_js-node_modules_delegated-e-e4591b", "vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-3bc7580", "vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-3bc7581"], {
        76745: ($, R, D) => {
            D.d(R, {Z: () => M});

            function y(u) {
                const m = document.createElement("pre");
                return m.style.width = "1px", m.style.height = "1px", m.style.position = "fixed", m.style.top = "5px", m.textContent = u, m
            }

            r(y, "createNode");

            function T(u) {
                if ("clipboard" in navigator) return navigator.clipboard.writeText(u.textContent);
                const m = getSelection();
                if (m == null) return Promise.reject(new Error);
                m.removeAllRanges();
                const F = document.createRange();
                return F.selectNodeContents(u), m.addRange(F), document.execCommand("copy"), m.removeAllRanges(), Promise.resolve()
            }

            r(T, "copyNode");

            function E(u) {
                if ("clipboard" in navigator) return navigator.clipboard.writeText(u);
                const m = document.body;
                if (!m) return Promise.reject(new Error);
                const F = y(u);
                return m.appendChild(F), T(F), m.removeChild(F), Promise.resolve()
            }

            r(E, "copyText");

            function C(u) {
                const m = u.getAttribute("for"), F = u.getAttribute("value");

                function V() {
                    u.dispatchEvent(new CustomEvent("clipboard-copy", {bubbles: !0}))
                }

                if (r(V, "trigger"), F) E(F).then(V); else if (m) {
                    const W = "getRootNode" in Element.prototype ? u.getRootNode() : u.ownerDocument;
                    if (!(W instanceof Document || "ShadowRoot" in window && W instanceof ShadowRoot)) return;
                    const d = W.getElementById(m);
                    d && j(d).then(V)
                }
            }

            r(C, "copy");

            function j(u) {
                return u instanceof HTMLInputElement || u instanceof HTMLTextAreaElement ? E(u.value) : u instanceof HTMLAnchorElement && u.hasAttribute("href") ? E(u.href) : T(u)
            }

            r(j, "copyTarget");

            function S(u) {
                const m = u.currentTarget;
                m instanceof HTMLElement && C(m)
            }

            r(S, "clicked");

            function A(u) {
                if (u.key === " " || u.key === "Enter") {
                    const m = u.currentTarget;
                    m instanceof HTMLElement && (u.preventDefault(), C(m))
                }
            }

            r(A, "keydown");

            function k(u) {
                u.currentTarget.addEventListener("keydown", A)
            }

            r(k, "focused");

            function p(u) {
                u.currentTarget.removeEventListener("keydown", A)
            }

            r(p, "blurred");

            class w extends HTMLElement {
                constructor() {
                    super();
                    this.addEventListener("click", S), this.addEventListener("focus", k), this.addEventListener("blur", p)
                }

                get value() {
                    return this.getAttribute("value") || ""
                }

                set value(m) {
                    this.setAttribute("value", m)
                }

                connectedCallback() {
                    this.hasAttribute("tabindex") || this.setAttribute("tabindex", "0"), this.hasAttribute("role") || this.setAttribute("role", "button")
                }
            }

            r(w, "ClipboardCopyElement"), window.customElements.get("clipboard-copy") || (window.ClipboardCopyElement = w, window.customElements.define("clipboard-copy", w));
            const M = w
        }, 65935: ($, R, D) => {
            D.d(R, {AC: () => w, rK: () => p, uT: () => k});

            function y(d, e) {
                const o = d.createElement("template");
                return o.innerHTML = e, d.importNode(o.content, !0)
            }

            r(y, "parseHTML");

            function T(d) {
                const e = new URLSearchParams, o = new FormData(d).entries();
                for (const [s, h] of [...o]) e.append(s, h.toString());
                return e.toString()
            }

            r(T, "serialize");

            class E extends Error {
                constructor(e, o) {
                    super(e);
                    this.response = o
                }
            }

            r(E, "ErrorWithResponse");

            function C() {
                let d, e;
                return [new Promise(function (s, h) {
                    d = s, e = h
                }), d, e]
            }

            r(C, "makeDeferred");
            let j;
            const S = [], A = [];

            function k(d) {
                S.push(d)
            }

            r(k, "afterRemote");

            function p(d) {
                A.push(d)
            }

            r(p, "beforeRemote");

            function w(d, e) {
                j || (j = new Map, document.addEventListener("submit", m));
                const o = j.get(d) || [];
                j.set(d, [...o, e])
            }

            r(w, "remoteForm");

            function M(d, e) {
                if (j) {
                    const o = j.get(d) || [];
                    j.set(d, o.filter(s => s !== e))
                }
            }

            r(M, "remoteUninstall");

            function u(d) {
                const e = [];
                for (const o of j.keys()) if (d.matches(o)) {
                    const s = j.get(o) || [];
                    e.push(...s)
                }
                return e
            }

            r(u, "getMatches");

            function m(d) {
                if (!(d.target instanceof HTMLFormElement)) return;
                const e = d.target, o = u(e);
                if (o.length === 0) return;
                const s = V(e), [h, g, i] = C();
                d.preventDefault(), F(o, e, s, h).then(async n => {
                    if (n) {
                        for (const a of A) await a(e);
                        W(s).then(g, i).catch(() => {
                        }).then(() => {
                            for (const a of S) a(e)
                        })
                    } else e.submit()
                }, n => {
                    e.submit(), setTimeout(() => {
                        throw n
                    })
                })
            }

            r(m, "handleSubmit");

            async function F(d, e, o, s) {
                let h = !1;
                for (const g of d) {
                    const [i, n] = C(), a = r(() => (h = !0, n(), s), "kick"), _ = {
                        text: a,
                        json: () => (o.headers.set("Accept", "application/json"), a()),
                        html: () => (o.headers.set("Accept", "text/html"), a())
                    };
                    await Promise.race([i, g(e, _, o)])
                }
                return h
            }

            r(F, "processHandlers");

            function V(d) {
                const e = {
                    method: d.method || "GET",
                    url: d.action,
                    headers: new Headers({"X-Requested-With": "XMLHttpRequest"}),
                    body: null
                };
                if (e.method.toUpperCase() === "GET") {
                    const o = T(d);
                    o && (e.url += (~e.url.indexOf("?") ? "&" : "?") + o)
                } else e.body = new FormData(d);
                return e
            }

            r(V, "buildRequest");

            async function W(d) {
                const e = await window.fetch(d.url, {
                    method: d.method,
                    body: d.body !== null ? d.body : void 0,
                    headers: d.headers,
                    credentials: "same-origin"
                }), o = {
                    url: e.url,
                    status: e.status,
                    statusText: e.statusText,
                    headers: e.headers,
                    text: "",
                    get json() {
                        const h = this, g = JSON.parse(h.text);
                        return delete h.json, h.json = g, h.json
                    },
                    get html() {
                        const h = this;
                        return delete h.html, h.html = y(document, h.text), h.html
                    }
                }, s = await e.text();
                if (o.text = s, e.ok) return o;
                throw new E("request failed", o)
            }

            r(W, "remoteSubmit")
        }, 59753: ($, R, D) => {
            D.d(R, {f: () => U, on: () => _});

            function y() {
                if (!(this instanceof y)) return new y;
                this.size = 0, this.uid = 0, this.selectors = [], this.selectorObjects = {}, this.indexes = Object.create(this.indexes), this.activeIndexes = []
            }

            r(y, "SelectorSet");
            var T = window.document.documentElement,
                E = T.matches || T.webkitMatchesSelector || T.mozMatchesSelector || T.oMatchesSelector || T.msMatchesSelector;
            y.prototype.matchesSelector = function (t, c) {
                return E.call(t, c)
            }, y.prototype.querySelectorAll = function (t, c) {
                return c.querySelectorAll(t)
            }, y.prototype.indexes = [];
            var C = /^#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
            y.prototype.indexes.push({
                name: "ID", selector: r(function (c) {
                    var l;
                    if (l = c.match(C)) return l[0].slice(1)
                }, "matchIdSelector"), element: r(function (c) {
                    if (c.id) return [c.id]
                }, "getElementId")
            });
            var j = /^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
            y.prototype.indexes.push({
                name: "CLASS", selector: r(function (c) {
                    var l;
                    if (l = c.match(j)) return l[0].slice(1)
                }, "matchClassSelector"), element: r(function (c) {
                    var l = c.className;
                    if (l) {
                        if (typeof l == "string") return l.split(/\s/);
                        if (typeof l == "object" && "baseVal" in l) return l.baseVal.split(/\s/)
                    }
                }, "getElementClassNames")
            });
            var S = /^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
            y.prototype.indexes.push({
                name: "TAG", selector: r(function (c) {
                    var l;
                    if (l = c.match(S)) return l[0].toUpperCase()
                }, "matchTagSelector"), element: r(function (c) {
                    return [c.nodeName.toUpperCase()]
                }, "getElementTagName")
            }), y.prototype.indexes.default = {
                name: "UNIVERSAL", selector: function () {
                    return !0
                }, element: function () {
                    return [!0]
                }
            };
            var A;
            typeof window.Map == "function" ? A = window.Map : A = function () {
                function t() {
                    this.map = {}
                }

                return r(t, "Map"), t.prototype.get = function (c) {
                    return this.map[c + " "]
                }, t.prototype.set = function (c, l) {
                    this.map[c + " "] = l
                }, t
            }();
            var k = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;

            function p(t, c) {
                t = t.slice(0).concat(t.default);
                var l = t.length, v, f, x, b, I = c, L, O, N = [];
                do if (k.exec(""), (x = k.exec(I)) && (I = x[3], x[2] || !I)) {
                    for (v = 0; v < l; v++) if (O = t[v], L = O.selector(x[1])) {
                        for (f = N.length, b = !1; f--;) if (N[f].index === O && N[f].key === L) {
                            b = !0;
                            break
                        }
                        b || N.push({index: O, key: L});
                        break
                    }
                } while (x);
                return N
            }

            r(p, "parseSelectorIndexes");

            function w(t, c) {
                var l, v, f;
                for (l = 0, v = t.length; l < v; l++) if (f = t[l], c.isPrototypeOf(f)) return f
            }

            r(w, "findByPrototype"), y.prototype.logDefaultIndexUsed = function () {
            }, y.prototype.add = function (t, c) {
                var l, v, f, x, b, I, L, O, N = this.activeIndexes, H = this.selectors, G = this.selectorObjects;
                if (typeof t == "string") {
                    for (l = {
                        id: this.uid++,
                        selector: t,
                        data: c
                    }, G[l.id] = l, L = p(this.indexes, t), v = 0; v < L.length; v++) O = L[v], x = O.key, f = O.index, b = w(N, f), b || (b = Object.create(f), b.map = new A, N.push(b)), f === this.indexes.default && this.logDefaultIndexUsed(l), I = b.map.get(x), I || (I = [], b.map.set(x, I)), I.push(l);
                    this.size++, H.push(t)
                }
            }, y.prototype.remove = function (t, c) {
                if (typeof t == "string") {
                    var l, v, f, x, b, I, L, O, N = this.activeIndexes, H = this.selectors = [],
                        G = this.selectorObjects, B = {}, q = arguments.length === 1;
                    for (l = p(this.indexes, t), f = 0; f < l.length; f++) for (v = l[f], x = N.length; x--;) if (I = N[x], v.index.isPrototypeOf(I)) {
                        if (L = I.map.get(v.key), L) for (b = L.length; b--;) O = L[b], O.selector === t && (q || O.data === c) && (L.splice(b, 1), B[O.id] = !0);
                        break
                    }
                    for (f in B) delete G[f], this.size--;
                    for (f in G) H.push(G[f].selector)
                }
            };

            function M(t, c) {
                return t.id - c.id
            }

            r(M, "sortById"), y.prototype.queryAll = function (t) {
                if (!this.selectors.length) return [];
                var c = {}, l = [], v = this.querySelectorAll(this.selectors.join(", "), t), f, x, b, I, L, O, N, H;
                for (f = 0, b = v.length; f < b; f++) for (L = v[f], O = this.matches(L), x = 0, I = O.length; x < I; x++) H = O[x], c[H.id] ? N = c[H.id] : (N = {
                    id: H.id,
                    selector: H.selector,
                    data: H.data,
                    elements: []
                }, c[H.id] = N, l.push(N)), N.elements.push(L);
                return l.sort(M)
            }, y.prototype.matches = function (t) {
                if (!t) return [];
                var c, l, v, f, x, b, I, L, O, N, H, G = this.activeIndexes, B = {}, q = [];
                for (c = 0, f = G.length; c < f; c++) if (I = G[c], L = I.element(t), L) {
                    for (l = 0, x = L.length; l < x; l++) if (O = I.map.get(L[l])) for (v = 0, b = O.length; v < b; v++) N = O[v], H = N.id, !B[H] && this.matchesSelector(t, N.selector) && (B[H] = !0, q.push(N))
                }
                return q.sort(M)
            };
            var u = {}, m = {}, F = new WeakMap, V = new WeakMap, W = new WeakMap,
                d = Object.getOwnPropertyDescriptor(Event.prototype, "currentTarget");

            function e(t, c, l) {
                var v = t[c];
                return t[c] = function () {
                    return l.apply(t, arguments), v.apply(t, arguments)
                }, t
            }

            r(e, "before");

            function o(t, c, l) {
                var v = [], f = c;
                do {
                    if (f.nodeType !== 1) break;
                    var x = t.matches(f);
                    if (x.length) {
                        var b = {node: f, observers: x};
                        l ? v.unshift(b) : v.push(b)
                    }
                } while (f = f.parentElement);
                return v
            }

            r(o, "dist_matches");

            function s() {
                F.set(this, !0)
            }

            r(s, "trackPropagation");

            function h() {
                F.set(this, !0), V.set(this, !0)
            }

            r(h, "trackImmediate");

            function g() {
                return W.get(this) || null
            }

            r(g, "getCurrentTarget");

            function i(t, c) {
                !d || Object.defineProperty(t, "currentTarget", {configurable: !0, enumerable: !0, get: c || d.get})
            }

            r(i, "defineCurrentTarget");

            function n(t) {
                try {
                    return t.eventPhase, !0
                } catch {
                    return !1
                }
            }

            r(n, "canDispatch");

            function a(t) {
                if (!!n(t)) {
                    var c = t.eventPhase === 1 ? m : u, l = c[t.type];
                    if (!!l) {
                        var v = o(l, t.target, t.eventPhase === 1);
                        if (!!v.length) {
                            e(t, "stopPropagation", s), e(t, "stopImmediatePropagation", h), i(t, g);
                            for (var f = 0, x = v.length; f < x && !F.get(t); f++) {
                                var b = v[f];
                                W.set(t, b.node);
                                for (var I = 0, L = b.observers.length; I < L && !V.get(t); I++) b.observers[I].data.call(b.node, t)
                            }
                            W.delete(t), i(t)
                        }
                    }
                }
            }

            r(a, "dispatch");

            function _(t, c, l) {
                var v = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, f = !!v.capture,
                    x = f ? m : u, b = x[t];
                b || (b = new y, x[t] = b, document.addEventListener(t, a, f)), b.add(c, l)
            }

            r(_, "on");

            function P(t, c, l) {
                var v = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, f = !!v.capture,
                    x = f ? m : u, b = x[t];
                !b || (b.remove(c, l), !b.size && (delete x[t], document.removeEventListener(t, a, f)))
            }

            r(P, "off");

            function U(t, c, l) {
                return t.dispatchEvent(new CustomEvent(c, {bubbles: !0, cancelable: !0, detail: l}))
            }

            r(U, "fire")
        }, 11793: ($, R, D) => {
            D.d(R, {EL: () => S, N9: () => W, Tz: () => d});

            class y {
                constructor(o) {
                    this.children = [], this.parent = o
                }

                delete(o) {
                    const s = this.children.indexOf(o);
                    return s === -1 ? !1 : (this.children = this.children.slice(0, s).concat(this.children.slice(s + 1)), this.children.length === 0 && this.parent.delete(this), !0)
                }

                add(o) {
                    return this.children.push(o), this
                }
            }

            r(y, "Leaf");

            class T {
                constructor(o) {
                    this.parent = null, this.children = {}, this.parent = o || null
                }

                get(o) {
                    return this.children[o]
                }

                insert(o) {
                    let s = this;
                    for (let h = 0; h < o.length; h += 1) {
                        const g = o[h];
                        let i = s.get(g);
                        if (h === o.length - 1) return i instanceof T && (s.delete(i), i = null), i || (i = new y(s), s.children[g] = i), i;
                        i instanceof y && (i = null), i || (i = new T(s), s.children[g] = i), s = i
                    }
                    return s
                }

                delete(o) {
                    for (const s in this.children) if (this.children[s] === o) {
                        const g = delete this.children[s];
                        return Object.keys(this.children).length === 0 && this.parent && this.parent.delete(this), g
                    }
                    return !1
                }
            }

            r(T, "RadixTrie");

            function E(e) {
                if (!(e instanceof HTMLElement)) return !1;
                const o = e.nodeName.toLowerCase(), s = (e.getAttribute("type") || "").toLowerCase();
                return o === "select" || o === "textarea" || o === "input" && s !== "submit" && s !== "reset" && s !== "checkbox" && s !== "radio" || e.isContentEditable
            }

            r(E, "isFormField");

            function C(e, o) {
                const s = new CustomEvent("hotkey-fire", {cancelable: !0, detail: {path: o}});
                !e.dispatchEvent(s) || (E(e) ? e.focus() : e.click())
            }

            r(C, "fireDeterminedAction");

            function j(e) {
                const o = [];
                let s = [""], h = !1;
                for (let g = 0; g < e.length; g++) {
                    if (h && e[g] === ",") {
                        o.push(s), s = [""], h = !1;
                        continue
                    }
                    if (e[g] === " ") {
                        s.push(""), h = !1;
                        continue
                    } else e[g] === "+" ? h = !1 : h = !0;
                    s[s.length - 1] += e[g]
                }
                return o.push(s), o.map(g => g.filter(i => i !== "")).filter(g => g.length > 0)
            }

            r(j, "expandHotkeyToEdges");

            function S(e) {
                const {ctrlKey: o, altKey: s, metaKey: h, key: g} = e, i = [], n = [o, s, h, k(e)];
                for (const [a, _] of n.entries()) _ && i.push(A[a]);
                return A.includes(g) || i.push(g), i.join("+")
            }

            r(S, "hotkey");
            const A = ["Control", "Alt", "Meta", "Shift"];

            function k(e) {
                const {shiftKey: o, code: s, key: h} = e;
                return o && !(s.startsWith("Key") && h.toUpperCase() === h)
            }

            r(k, "showShift");
            const p = new T, w = new WeakMap;
            let M = p, u = null, m = [];

            function F() {
                m = [], u = null, M = p
            }

            r(F, "resetTriePosition");

            function V(e) {
                if (e.defaultPrevented || !(e.target instanceof Node)) return;
                if (E(e.target)) {
                    const s = e.target;
                    if (!s.id || !s.ownerDocument.querySelector(`[data-hotkey-scope="${s.id}"]`)) return
                }
                u != null && window.clearTimeout(u), u = window.setTimeout(F, 1500);
                const o = M.get(S(e));
                if (!o) {
                    F();
                    return
                }
                if (m.push(S(e)), M = o, o instanceof y) {
                    const s = e.target;
                    let h = !1, g;
                    const i = E(s);
                    for (let n = o.children.length - 1; n >= 0; n -= 1) {
                        g = o.children[n];
                        const a = g.getAttribute("data-hotkey-scope");
                        if (!i && !a || i && s.id === a) {
                            h = !0;
                            break
                        }
                    }
                    g && h && (C(g, m), e.preventDefault()), F()
                }
            }

            r(V, "keyDownHandler");

            function W(e, o) {
                Object.keys(p.children).length === 0 && document.addEventListener("keydown", V);
                const h = j(o || e.getAttribute("data-hotkey") || "").map(g => p.insert(g).add(e));
                w.set(e, h)
            }

            r(W, "install");

            function d(e) {
                const o = w.get(e);
                if (o && o.length) for (const s of o) s && s.delete(e);
                Object.keys(p.children).length === 0 && document.removeEventListener("keydown", V)
            }

            r(d, "uninstall")
        }, 86058: ($, R, D) => {
            D.d(R, {R: () => A});

            function y() {
                let k;
                try {
                    k = window.top.document.referrer
                } catch {
                    if (window.parent) try {
                        k = window.parent.document.referrer
                    } catch {
                    }
                }
                return k === "" && (k = document.referrer), k
            }

            r(y, "getReferrer");

            function T() {
                try {
                    return `${screen.width}x${screen.height}`
                } catch {
                    return "unknown"
                }
            }

            r(T, "getScreenResolution");

            function E() {
                let k = 0, p = 0;
                try {
                    return typeof window.innerWidth == "number" ? (p = window.innerWidth, k = window.innerHeight) : document.documentElement != null && document.documentElement.clientWidth != null ? (p = document.documentElement.clientWidth, k = document.documentElement.clientHeight) : document.body != null && document.body.clientWidth != null && (p = document.body.clientWidth, k = document.body.clientHeight), `${p}x${k}`
                } catch {
                    return "unknown"
                }
            }

            r(E, "getBrowserResolution");

            function C() {
                return navigator.languages ? navigator.languages.join(",") : navigator.language || ""
            }

            r(C, "getBrowserLanguages");

            function j() {
                return {
                    referrer: y(),
                    user_agent: navigator.userAgent,
                    screen_resolution: T(),
                    browser_resolution: E(),
                    browser_languages: C(),
                    pixel_ratio: window.devicePixelRatio,
                    timestamp: Date.now(),
                    tz_seconds: new Date().getTimezoneOffset() * -60
                }
            }

            r(j, "getRequestContext");
            var S = D(82918);

            class A {
                constructor(p) {
                    this.options = p
                }

                get collectorUrl() {
                    return this.options.collectorUrl
                }

                get clientId() {
                    return this.options.clientId ? this.options.clientId : (0, S.b)()
                }

                createEvent(p) {
                    return {page: location.href, title: document.title, context: {...this.options.baseContext, ...p}}
                }

                sendPageView(p) {
                    const w = this.createEvent(p);
                    this.send({page_views: [w]})
                }

                sendEvent(p, w) {
                    const M = {...this.createEvent(w), type: p};
                    this.send({events: [M]})
                }

                send({page_views: p, events: w}) {
                    const M = {client_id: this.clientId, page_views: p, events: w, request_context: j()},
                        u = JSON.stringify(M);
                    try {
                        if (navigator.sendBeacon) {
                            navigator.sendBeacon(this.collectorUrl, u);
                            return
                        }
                    } catch {
                    }
                    fetch(this.collectorUrl, {
                        method: "POST",
                        cache: "no-cache",
                        headers: {"Content-Type": "application/json"},
                        body: u,
                        keepalive: !1
                    })
                }
            }

            r(A, "AnalyticsClient")
        }, 82918: ($, R, D) => {
            D.d(R, {b: () => j});
            let y;

            function T() {
                return `${Math.round(Math.random() * (Math.pow(2, 31) - 1))}.${Math.round(Date.now() / 1e3)}`
            }

            r(T, "generateClientId");

            function E(S) {
                const A = `GH1.1.${S}`, k = Date.now(), p = new Date(k + 1 * 365 * 86400 * 1e3).toUTCString();
                let {domain: w} = document;
                w.endsWith(".github.com") && (w = "github.com"), document.cookie = `_octo=${A}; expires=${p}; path=/; domain=${w}; secure; samesite=lax`
            }

            r(E, "setClientIdCookie");

            function C() {
                let S;
                const k = document.cookie.match(/_octo=([^;]+)/g);
                if (!k) return;
                let p = [0, 0];
                for (const w of k) {
                    const [, M] = w.split("="), [, u, ...m] = M.split("."), F = u.split("-").map(Number);
                    F > p && (p = F, S = m.join("."))
                }
                return S
            }

            r(C, "getClientIdFromCookie");

            function j() {
                try {
                    const S = C();
                    if (S) return S;
                    const A = T();
                    return E(A), A
                } catch {
                    return y || (y = T()), y
                }
            }

            r(j, "getOrCreateClientId")
        }, 88149: ($, R, D) => {
            D.d(R, {n: () => y});

            function y(T = "ha") {
                let E;
                const C = {}, j = document.head.querySelectorAll(`meta[name^="${T}-"]`);
                for (const S of Array.from(j)) {
                    const {name: A, content: k} = S, p = A.replace(`${T}-`, "").replace(/-/g, "_");
                    p === "url" ? E = k : C[p] = k
                }
                if (!E) throw new Error(`AnalyticsClient ${T}-url meta tag not found`);
                return {collectorUrl: E, ...Object.keys(C).length > 0 ? {baseContext: C} : {}}
            }

            r(y, "getOptionsFromMeta")
        }, 69567: ($, R, D) => {
            D.d(R, {sV: () => S, GZ: () => M, R: () => g, AQ: () => u, W_: () => F, Al: () => m, XK: () => W});

            function* y(i) {
                let n = "", a = 0, _ = !1;
                for (let P = 0; P < i.length; P += 1) i[P] === "{" && i[P + 1] === "{" && i[P - 1] !== "\\" && !_ ? (_ = !0, n && (yield{
                    type: "string",
                    start: a,
                    end: P,
                    value: n
                }), n = "{{", a = P, P += 2) : i[P] === "}" && i[P + 1] === "}" && i[P - 1] !== "\\" && _ && (_ = !1, yield{
                    type: "part",
                    start: a,
                    end: P + 2,
                    value: n.slice(2).trim()
                }, n = "", P += 2, a = P), n += i[P] || "";
                n && (yield{type: "string", start: a, end: i.length, value: n})
            }

            r(y, "parse");
            var T = function (i, n, a) {
                if (!n.has(i)) throw new TypeError("attempted to set private field on non-instance");
                return n.set(i, a), a
            }, E = function (i, n) {
                if (!n.has(i)) throw new TypeError("attempted to get private field on non-instance");
                return n.get(i)
            }, C, j;

            class S {
                constructor(n, a) {
                    this.expression = a, C.set(this, void 0), j.set(this, ""), T(this, C, n), E(this, C).updateParent("")
                }

                get attributeName() {
                    return E(this, C).attr.name
                }

                get attributeNamespace() {
                    return E(this, C).attr.namespaceURI
                }

                get value() {
                    return E(this, j)
                }

                set value(n) {
                    T(this, j, n || ""), E(this, C).updateParent(n)
                }

                get element() {
                    return E(this, C).element
                }

                get booleanValue() {
                    return E(this, C).booleanValue
                }

                set booleanValue(n) {
                    E(this, C).booleanValue = n
                }
            }

            r(S, "AttributeTemplatePart"), C = new WeakMap, j = new WeakMap;

            class A {
                constructor(n, a) {
                    this.element = n, this.attr = a, this.partList = []
                }

                get booleanValue() {
                    return this.element.hasAttributeNS(this.attr.namespaceURI, this.attr.name)
                }

                set booleanValue(n) {
                    if (this.partList.length !== 1) throw new DOMException("Operation not supported", "NotSupportedError");
                    this.partList[0].value = n ? "" : null
                }

                append(n) {
                    this.partList.push(n)
                }

                updateParent(n) {
                    if (this.partList.length === 1 && n === null) this.element.removeAttributeNS(this.attr.namespaceURI, this.attr.name); else {
                        const a = this.partList.map(_ => typeof _ == "string" ? _ : _.value).join("");
                        this.element.setAttributeNS(this.attr.namespaceURI, this.attr.name, a)
                    }
                }
            }

            r(A, "AttributeValueSetter");
            var k = function (i, n, a) {
                if (!n.has(i)) throw new TypeError("attempted to set private field on non-instance");
                return n.set(i, a), a
            }, p = function (i, n) {
                if (!n.has(i)) throw new TypeError("attempted to get private field on non-instance");
                return n.get(i)
            }, w;

            class M {
                constructor(n, a) {
                    this.expression = a, w.set(this, void 0), k(this, w, [n]), n.textContent = ""
                }

                get value() {
                    return p(this, w).map(n => n.textContent).join("")
                }

                set value(n) {
                    this.replace(n)
                }

                get previousSibling() {
                    return p(this, w)[0].previousSibling
                }

                get nextSibling() {
                    return p(this, w)[p(this, w).length - 1].nextSibling
                }

                replace(...n) {
                    const a = n.map(_ => typeof _ == "string" ? new Text(_) : _);
                    a.length || a.push(new Text("")), p(this, w)[0].before(...a);
                    for (const _ of p(this, w)) _.remove();
                    k(this, w, a)
                }
            }

            r(M, "NodeTemplatePart"), w = new WeakMap;

            function u(i) {
                return {
                    createCallback(n, a, _) {
                        this.processCallback(n, a, _)
                    }, processCallback(n, a, _) {
                        var P;
                        if (!(typeof _ != "object" || !_)) {
                            for (const U of a) if (U.expression in _) {
                                const t = (P = _[U.expression]) !== null && P !== void 0 ? P : "";
                                i(U, t)
                            }
                        }
                    }
                }
            }

            r(u, "createProcessor");

            function m(i, n) {
                i.value = String(n)
            }

            r(m, "processPropertyIdentity");

            function F(i, n) {
                return typeof n == "boolean" && i instanceof S && typeof i.element[i.attributeName] == "boolean" ? (i.booleanValue = n, !0) : !1
            }

            r(F, "processBooleanAttribute");
            const V = u(m), W = u((i, n) => {
                F(i, n) || m(i, n)
            });
            var d = function (i, n, a) {
                if (!n.has(i)) throw new TypeError("attempted to set private field on non-instance");
                return n.set(i, a), a
            }, e = function (i, n) {
                if (!n.has(i)) throw new TypeError("attempted to get private field on non-instance");
                return n.get(i)
            }, o, s;

            function* h(i) {
                const n = i.ownerDocument.createTreeWalker(i, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, null, !1);
                let a;
                for (; a = n.nextNode();) if (a instanceof Element && a.hasAttributes()) for (let _ = 0; _ < a.attributes.length; _ += 1) {
                    const P = a.attributes.item(_);
                    if (P && P.value.includes("{{")) {
                        const U = new A(a, P);
                        for (const t of y(P.value)) if (t.type === "string") U.append(t.value); else {
                            const c = new S(U, t.value);
                            U.append(c), yield c
                        }
                    }
                } else if (a instanceof Text && a.textContent && a.textContent.includes("{{")) for (const _ of y(a.textContent)) {
                    _.end < a.textContent.length && a.splitText(_.end), _.type === "part" && (yield new M(a, _.value));
                    break
                }
            }

            r(h, "collectParts");

            class g extends DocumentFragment {
                constructor(n, a, _ = V) {
                    var P, U;
                    super();
                    o.set(this, void 0), s.set(this, void 0), Object.getPrototypeOf(this !== g.prototype) && Object.setPrototypeOf(this, g.prototype), this.appendChild(n.content.cloneNode(!0)), d(this, s, Array.from(h(this))), d(this, o, _), (U = (P = e(this, o)).createCallback) === null || U === void 0 || U.call(P, this, e(this, s), a)
                }

                update(n) {
                    e(this, o).processCallback(this, e(this, s), n)
                }
            }

            r(g, "TemplateInstance"), o = new WeakMap, s = new WeakMap
        }
    }]);
})();

//# sourceMappingURL=vendors-node_modules_github_clipboard-copy-element_dist_index_esm_js-node_modules_github_remo-9d7385-d0f91a4ee12b.js.map